값에 의한 호출 = 매개 변수에 전달할 때, 객체를 복사하므로 복사에 시간 걸림, 얕은 복사가 이루어짐, 원본 객체 훼손이 되지 않음. 생성자는 실행 x, 소멸자는 실행됨.
주소에 의한 호출 = 매개변수에 전달할 때, 객체 주소를 전달하므로, 시간이 적게 걸리고, 복사가 안됨. 원본 객체 훼손에 주의 해야 함.

* 객체 리턴 = 객체를 리턴하면, 객체를 복사하여 리턴한다.

참조 = 이미 선언된 변수에 대한 별명, 참조자 &를 이용하여 선언하며, 원본 변수로 초기화 하여야 한다.

* 참조 변수에 대한 포인터를 만들 수 있다.
int n;
int & refn = n;
int * p = &refn; // refn의 주소를 가진다.

참조변수는 선언과 동시에 초기화를 해야하며, 참조변수의 배열은 만들 수 없고, &의 위치는 타입과 변수명 사이에만 존재하면 띄어쓰기는 신경쓰지 않아도 된다.
또한 참조변수에 대한 참조선언 역시 가능하다.

** 참조에 의한 호출 **
함수를 호출하는 쪽의 실인자를 참조하여, "실인자와 공간을 공유"하도록 한다.
값에 의한 호출과 모양이 같지만, 함수 원형으로 구분된다.
생성자, 소멸자는 모두 실행되지 않는다.

** 참조 리턴 **
변수의 참조를 리턴하므로, 리턴된 참조를 L-Value로 넣으면 변수로 기능하고, R-Value로 넣으면 값으로 기능한다.
만약 L-Value가 참조변수라면, R-Value로 들어간 참조함수는 참조를 리턴한다.

**** 복사 생성자 ****
얕은 복사 -> 죄다 같은 값으로 복사한다. 따라서 포인터 변수에 저장된 변수의 주소의 경우도, 같은 주소를 그대로 복사하므로, 이 경우 변수나 배열이 복사된 객체와 공유된다.

복사 생성자 선언
Circle(const Circle& c); 자신 클래스의 참조를 인자로 하는 생성자를 선언하면 복사 생성자이다.
복사 생성자의 매개변수는 오직 하나, 자기 클래스의 참조이며, 클래스당 1개만 선언 가능하다.

디폴트 복사 생성자 = 복사생성자를 선언하지 않을 경우, 컴파일러가 디폴트로 넣는 생성자로, 모든 멤버함수의 값을 그대로 복사해온다. (진짜 값이든, 변수의 주소값이든)
따라서 포인터 타입의 멤버 변수가 없는 클래스의 경우, 얕은 복사로 인한 문제가 없다.

** 묵시적 복사 생성
1. 객체로 초기화 하여 객체가 생성될 때
Circle pizza = donut // donut은 Circle 객체로 전에 생성되어 있던 객체, donut을 얕은 복사하여 pizza로 만든다. pizza(donut)과 동일 코드

하지만!!!! Circle pizza; pizza = donut; 이 코드는 객체를 복사하는게 아니라, 객체를 "치환" 하는 것이다. 주의!! 일단 pizza를 기본 생성자로 만들어 놓고,
pizza 변수를 donut 객체 변수로 치환하는 것이다. 이 때는 복사 생성자가 호출되지 않는다.
동일한 donut 객체를 donut 변수와 pizza 변수가 둘다 가리키고 있는 것이다.

2. 값에 의한 호출로 객체가 전달 되는 경우

3. 함수가 객체를 return 할 때, return 문은 리턴 객체의 복사본을 생성하여 호출한 곳으로 전달한다.
