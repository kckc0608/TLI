1. 1

2. 3, except는 파이썬 코드다. (자바도 이거였나..?)

3. 3, 하나의 try에는 여러개의 catch를 만들 수 있다. 디폴트로 생성되는건 없다.

4. 3, 예외 처리후 프로그램 실행을 종료하진 않는다. 하나의 catch 블록은 하나의 예외 타입만 처리하는데, 복수의 예외 타입을 받는 건 catch(...) {} 로 할 수 있다.
    ( 이 경우에도 처리는 한번에 한종류를 한다.)

5. 100

6. 3aa

7. 4 // throw 문이 실행되면 그 이후 try문 내용은 실행되지 않는다.

8. (1) 0을 다루지 않음
   (2) 0
   (3) 4

9. (1) 10
   (2) 음수는 다루지 않음-3 // catch문 외부의 코드는 항상 실행.
   
10. 프로그램이 abrot() 함수 실행과 함께 비정상 종료된다.

11. int get() throw(char*) {} // 답지에서는 const를 붙이지 않았다.

12. int형의 throw를 하는 코드가 포함된 함수 big

13. 2

14. throw() 지시어에 포함되지 않은 타입의 throw가 존재한다. 하지만 이렇게 해도 컴파일 오류는 발생하지 않고, 잘 실행된다.

15. 이름 규칙, naming mangling

16. void put(char*); 함수는 외부 소스파일에 구현된 함수.
    void print(char*); 함수는 C 컴파일러 방식의 이름규칙으로 컴파일하여 목적코드를 생성해야 하는 함수
    
17. 이름 규칙으로 매개변수, 리턴타입을 신경쓰지 않고 오직 함수 이름만을 신경쓰기 때문에, 같은 함수 이름이 사용되면 모두 동일한 이름으로 목적코드가 생성되기 때문에 
    구분할 수 없기 때문이다.
    
18. _print, _main

19. 함수의 구현이 c 소스파일에서 이루어지고 있으므로, extern "C" int add(int x, int y); 로 수정해야 한다. 안그러면 링크시 오륙 ㅏ발생한다.

20. subtract, pultiply 의 컴파일시에는 오류가 없다. main도 컴파일시 오류는 없다. 하지만 링크시 오류가 발생한다. 따라서 extern "C" 코드로 함수 원형을 선언해주어야 한다.
