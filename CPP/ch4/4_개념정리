- 객체 포인터
Circle * p = &donut;
초기화 하지 않은 포인터에 접근하면 에러 발생.

- 객체 배열 선언
Circle array[3];
Circle *p = array;

객체 배열 선언문은 "기본생성자를 호출"한다. 따라서 기본생성자가 생성되어 있지 않은 경우, 컴파일 에러 발생.
p[i] 또는 *(p+i) 로 배열에 접근할 수 있다.

배열 소멸시, 원소 객체마다 소멸자가 실행된다. (높은 인덱스부터, 낮은 인덱스 순으로)

객체 배열 초기화를 다음과 같이 할 수 있다.
Circle array[3] = {Circle(10), Circle(20), Circle() };

다차원 객체 배열도 마찬가지

Circle array[2][3] = { {Circle(10), Circle(20), Circle() },
                       {Circle(10), Circle(20), Circle() } };
                       
**** 동적 메모리 할당 및 반환 ****
new    -> heap 메모리 공간에서 메모리를 할당, heap 메모리가 부족하면 NULL을 반환한다. NULL 반환 체크 방법에는 (p == NULL) 또는 (!p) 가 있다.
delete -> heap에 메모리를 반환한다. (운영체제에 메모리를 반환한다.), heap 이 아닌 곳에서 메모리를 받은 경우, p = &n; delete를 사용시 에러 발생. 두번 반환시 에러 발생.

Circle * p = new Circle();
delete p;

배열의 동적 할당 - 이 경우에도 기본 생성자 이외의 생성자 호출은 할 수 없다.
Circle* array = new Circle[10];
delete [] array;

이거는 가능하다.
Circle* array = new Circle [] { Circle(10), Circle(20), Circle(30), Circle() };

delete 실행시, 객체 반환 전 소멸자가 호출된다.

객체 생성시
Circle c;
Circle c(); // 이거는 오류 발생은 없어도, 경고 발생 가능. 또한, C의 멤버함수 호출시 에러 발생. 함수로 인지하기 때문

Circle * cp = new Circle;
Circle * cp = new Circle(); // 이거는 둘다 가능.

this -> 객체 자기 자신에 대한 포인터 
멤버 변수 이름과 매개변수 이름이 같을 때, 멤버 변수와 매개변수를 구분하기 위해 사용하거나
객체 멤버 함수에서 객체 자기 자신을 return 할 때 사용.

this 는 "static"이 아닌 멤버 함수 내에서 사용. static은 객체 멤버가 아니라 클래스 멤버이므로 객체를 반환할 수 없다.
컴파일러가 모든 멤버함수에 대해 묵시적으로 Class * this 매개변수를 추가하고, 함수 호출 문에서는 &객체 를 인자로 넣는다.

** getline() 에서 '\n' 이외 문자로 끝을 낸 경우, cin 버퍼에 '\n'이 남아있게 되므로, 이를 지우기 위해 cin.ignore()를 해주어야 한다.
